AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Clean Strands TCG Agent - Container Image Deployment with WebSocket Support
Parameters:
  Environment:
    Type: String
    Default: production
    Description: Environment name
Globals:
  Function:
    Timeout: 30
    MemorySize: 1024
    Architectures:
    - x86_64
    Environment:
      Variables:
        ENVIRONMENT:
          Ref: Environment
        LANGFUSE_PUBLIC_KEY_PARAM:
          Fn::Sub: /tcg-agent/${Environment}/langfuse/public-key
        LANGFUSE_SECRET_KEY_PARAM:
          Fn::Sub: /tcg-agent/${Environment}/langfuse/secret-key
        LANGFUSE_HOST_PARAM:
          Fn::Sub: /tcg-agent/${Environment}/langfuse/host
        LANGFUSE_PUBLIC_KEY:
          Fn::Sub: '{{resolve:ssm:/tcg-agent/${Environment}/langfuse/public-key}}'
        LANGFUSE_HOST: https://cloud.langfuse.com
        COMPETITIVE_DECK_ENDPOINT_PARAM:
          Fn::Sub: /tcg-agent/${Environment}/deck-api/endpoint
        COMPETITIVE_DECK_SECRET_PARAM:
          Fn::Sub: /tcg-agent/${Environment}/deck-api/secret
        SHOPIFY_STORE_URL_PARAM:
          Fn::Sub: /tcg-agent/${Environment}/shopify/store-url
        SHOPIFY_ACCESS_TOKEN_PARAM:
          Fn::Sub: /tcg-agent/${Environment}/shopify/access-token
        CONNECTIONS_TABLE_NAME:
          Ref: ConnectionsTable
Resources:
  ConnectionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName:
        Fn::Sub: ${AWS::StackName}-connections
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
      - AttributeName: connectionId
        AttributeType: S
      KeySchema:
      - AttributeName: connectionId
        KeyType: HASH
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
    Metadata:
      SamResourceId: ConnectionsTable
  WebSocketApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name:
        Fn::Sub: ${AWS::StackName}-websocket
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: $request.body.action
    Metadata:
      SamResourceId: WebSocketApi
  WebSocketStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId:
        Ref: WebSocketApi
      StageName:
        Ref: Environment
      DefaultRouteSettings:
        DataTraceEnabled: false
        LoggingLevel: false
    Metadata:
      SamResourceId: WebSocketStage
  ConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: WebSocketApi
      RouteKey: $connect
      AuthorizationType: NONE
      OperationName: ConnectRoute
      Target:
        Fn::Join:
        - /
        - - integrations
          - Ref: ConnectIntegration
    Metadata:
      SamResourceId: ConnectRoute
  DisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: WebSocketApi
      RouteKey: $disconnect
      AuthorizationType: NONE
      OperationName: DisconnectRoute
      Target:
        Fn::Join:
        - /
        - - integrations
          - Ref: DisconnectIntegration
    Metadata:
      SamResourceId: DisconnectRoute
  MessageRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: WebSocketApi
      RouteKey: message
      AuthorizationType: NONE
      OperationName: MessageRoute
      Target:
        Fn::Join:
        - /
        - - integrations
          - Ref: MessageIntegration
    Metadata:
      SamResourceId: MessageRoute
  ConnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId:
        Ref: WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebSocketConnectFunction.Arn}/invocations
    Metadata:
      SamResourceId: ConnectIntegration
  DisconnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId:
        Ref: WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebSocketDisconnectFunction.Arn}/invocations
    Metadata:
      SamResourceId: DisconnectIntegration
  MessageIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId:
        Ref: WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebSocketMessageFunction.Arn}/invocations
    Metadata:
      SamResourceId: MessageIntegration
  WebSocketConnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: ${AWS::StackName}-ws-connect
      CodeUri: s3://tcg-agent-deployment/54e9b36ba58235859666db9891c84631
      Handler: websocket_handler.connect_handler
      Runtime: python3.12
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: ConnectionsTable
      - Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:PutLogEvents
          Resource: '*'
    Metadata:
      SamResourceId: WebSocketConnectFunction
  WebSocketDisconnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: ${AWS::StackName}-ws-disconnect
      CodeUri: s3://tcg-agent-deployment/54e9b36ba58235859666db9891c84631
      Handler: websocket_handler.disconnect_handler
      Runtime: python3.12
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: ConnectionsTable
      - Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:PutLogEvents
          Resource: '*'
    Metadata:
      SamResourceId: WebSocketDisconnectFunction
  WebSocketMessageFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: ${AWS::StackName}-ws-message
      CodeUri: s3://tcg-agent-deployment/54e9b36ba58235859666db9891c84631
      Handler: websocket_handler.message_handler
      Runtime: python3.12
      Timeout: 60
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: ConnectionsTable
      - Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:PutLogEvents
          - execute-api:ManageConnections
          Resource: '*'
        - Effect: Allow
          Action:
          - ssm:GetParameter
          - ssm:GetParameters
          Resource:
          - Fn::Sub: arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/tcg-agent/${Environment}/*
        - Effect: Allow
          Action:
          - bedrock:InvokeModel
          - bedrock:InvokeModelWithResponseStream
          Resource: '*'
    Metadata:
      SamResourceId: WebSocketMessageFunction
  WebSocketConnectPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: WebSocketConnectFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/${Environment}/$connect
    Metadata:
      SamResourceId: WebSocketConnectPermission
  WebSocketDisconnectPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: WebSocketDisconnectFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/${Environment}/$disconnect
    Metadata:
      SamResourceId: WebSocketDisconnectPermission
  WebSocketMessagePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: WebSocketMessageFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/${Environment}/message
    Metadata:
      SamResourceId: WebSocketMessagePermission
  StrandsAgentFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: ${AWS::StackName}-agent
      PackageType: Image
      ImageUri:
        Fn::Sub: ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${AWS::StackName}-agent:latest
      Description: Strands TCG Agent with container image deployment
      Policies:
      - Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - ssm:GetParameter
          - ssm:GetParameters
          Resource:
          - Fn::Sub: arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/tcg-agent/${Environment}/*
        - Effect: Allow
          Action:
          - bedrock:InvokeModel
          - bedrock:InvokeModelWithResponseStream
          Resource: '*'
        - Effect: Allow
          Action:
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:PutLogEvents
          Resource: '*'
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /{proxy+}
            Method: ANY
            RestApiId:
              Ref: StrandsApi
        HealthCheck:
          Type: Api
          Properties:
            Path: /health
            Method: GET
            RestApiId:
              Ref: StrandsApi
    Metadata:
      DockerTag: latest
      DockerContext: ./
      Dockerfile: Dockerfile
      SamResourceId: StrandsAgentFunction
  StrandsApi:
    Type: AWS::Serverless::Api
    Properties:
      Name:
        Fn::Sub: ${AWS::StackName}-api
      StageName:
        Ref: Environment
      Cors:
        AllowMethods: '''GET,POST,OPTIONS'''
        AllowHeaders: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
        AllowOrigin: '''*'''
      DefinitionBody:
        openapi: 3.0.1
        info:
          title:
            Fn::Sub: ${AWS::StackName} API
          version: '1.0'
        paths:
          /:
            post:
              x-amazon-apigateway-integration:
                type: aws_proxy
                httpMethod: POST
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${StrandsAgentFunction.Arn}/invocations
          /{proxy+}:
            x-amazon-apigateway-any-method:
              x-amazon-apigateway-integration:
                type: aws_proxy
                httpMethod: POST
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${StrandsAgentFunction.Arn}/invocations
          /health:
            get:
              x-amazon-apigateway-integration:
                type: aws_proxy
                httpMethod: POST
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${StrandsAgentFunction.Arn}/invocations
    Metadata:
      SamResourceId: StrandsApi
  StrandsAgentFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: StrandsAgentFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${StrandsApi}/*/*
    Metadata:
      SamResourceId: StrandsAgentFunctionPermission
  StrandsAgentRootPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: StrandsAgentFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${StrandsApi}/*/POST/
    Metadata:
      SamResourceId: StrandsAgentRootPermission
  StrandsAgentHealthPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: StrandsAgentFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${StrandsApi}/*/GET/health
    Metadata:
      SamResourceId: StrandsAgentHealthPermission
Outputs:
  ApiUrl:
    Description: API Gateway endpoint URL
    Value:
      Fn::Sub: https://${StrandsApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-ApiUrl
  WebSocketApiUrl:
    Description: WebSocket API endpoint URL
    Value:
      Fn::Sub: wss://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-WebSocketApiUrl
  ConnectionsTableName:
    Description: DynamoDB table for WebSocket connections
    Value:
      Ref: ConnectionsTable
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-ConnectionsTableName
  FunctionName:
    Description: Lambda function name
    Value:
      Ref: StrandsAgentFunction
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-FunctionName
  FunctionArn:
    Description: Lambda function ARN
    Value:
      Fn::GetAtt:
      - StrandsAgentFunction
      - Arn
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-FunctionArn
  ImageUri:
    Description: Container image URI
    Value:
      Fn::Sub: ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${AWS::StackName}-agent:latest
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-ImageUri
