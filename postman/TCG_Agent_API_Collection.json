{
	"info": {
		"_postman_id": "tcg-agent-api-collection",
		"name": "TCG Agent API Collection",
		"description": "Comprehensive test collection for One Piece TCG Strands Agent v2.0\n\nThis collection includes:\n- Health checks\n- Basic agent queries\n- Deck recommendations\n- Shopify integration tests\n- Session management\n- Error handling scenarios\n\nBase URL: https://mxrm5uczs2.execute-api.us-east-1.amazonaws.com/production",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "tcg-agent-v2"
	},
	"item": [
		{
			"name": "Health Check",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has status field\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('status');",
							"});",
							"",
							"pm.test(\"Service is healthy or degraded\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.status).to.be.oneOf(['healthy', 'degraded']);",
							"});",
							"",
							"pm.test(\"Response has service info\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('service');",
							"    pm.expect(jsonData.service).to.include('TCG Strands Agent');",
							"});",
							"",
							"pm.test(\"Response time is acceptable\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(5000);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "User-Agent",
						"value": "PostmanTesting/1.0",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/health",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"health"
					]
				},
				"description": "Health check endpoint to verify the TCG Agent service is running and operational.\n\nExpected Response:\n- Status: 200 OK\n- Body: JSON with service status and capabilities"
			},
			"response": [
				{
					"name": "Healthy Response",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/health",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"health"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"status\": \"healthy\",\n  \"service\": \"One Piece TCG Strands Agent v2.0\",\n  \"capabilities\": {\n    \"deck_recommendations\": true,\n    \"shopify_mcp_integration\": true\n  },\n  \"mcp_server\": {\n    \"status\": \"connected\",\n    \"shop_domain\": \"tcg-ai.myshopify.com\",\n    \"available_tools\": [\"search_shop_catalog\", \"manage_cart\"]\n  },\n  \"environment\": {\n    \"strands_available\": true,\n    \"langfuse_configured\": true,\n    \"deck_api_configured\": true\n  }\n}"
				}
			]
		},
		{
			"name": "Basic Agent Query",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Set dynamic session ID",
							"pm.environment.set(\"session_id\", \"postman-basic-\" + Date.now());"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has required fields\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('response');",
							"    pm.expect(jsonData).to.have.property('sessionId');",
							"});",
							"",
							"pm.test(\"Response is not empty\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.response).to.be.a('string');",
							"    pm.expect(jsonData.response.length).to.be.greaterThan(0);",
							"});",
							"",
							"pm.test(\"Session ID is preserved\", function () {",
							"    const jsonData = pm.response.json();",
							"    const requestSessionId = JSON.parse(pm.request.body.raw).sessionId;",
							"    pm.expect(jsonData.sessionId).to.eql(requestSessionId);",
							"});",
							"",
							"pm.test(\"Response time is acceptable\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(30000);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "User-Agent",
						"value": "PostmanTesting/1.0",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"inputText\": \"Hello, what can you help me with?\",\n  \"sessionId\": \"{{session_id}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/",
					"host": [
						"{{base_url}}"
					],
					"path": [
						""
					]
				},
				"description": "Basic agent query to test general functionality and response format.\n\nThis request tests:\n- Basic agent response\n- Session management\n- Response format validation\n- Service capabilities"
			},
			"response": []
		},
		{
			"name": "Deck Recommendation Query",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Set dynamic session ID for deck testing",
							"pm.environment.set(\"deck_session_id\", \"postman-deck-\" + Date.now());"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response contains deck information\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.response).to.be.a('string');",
							"    // Check if response mentions deck-related terms",
							"    const response = jsonData.response.toLowerCase();",
							"    const deckTerms = ['deck', 'luffy', 'red', 'op10', 'tournament', 'gumgum'];",
							"    const containsDeckInfo = deckTerms.some(term => response.includes(term));",
							"    pm.expect(containsDeckInfo).to.be.true;",
							"});",
							"",
							"pm.test(\"Session ID is maintained\", function () {",
							"    const jsonData = pm.response.json();",
							"    const requestSessionId = JSON.parse(pm.request.body.raw).sessionId;",
							"    pm.expect(jsonData.sessionId).to.eql(requestSessionId);",
							"});",
							"",
							"pm.test(\"Response indicates deck recommendation capability\", function () {",
							"    const jsonData = pm.response.json();",
							"    if (jsonData.capabilities) {",
							"        pm.expect(jsonData.capabilities.deck_recommendations).to.be.true;",
							"    }",
							"});",
							"",
							"pm.test(\"Response time is reasonable for deck query\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(45000);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "User-Agent",
						"value": "PostmanTesting/1.0",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"inputText\": \"Show me a Red Luffy deck for OP10 in the West region\",\n  \"sessionId\": \"{{deck_session_id}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/",
					"host": [
						"{{base_url}}"
					],
					"path": [
						""
					]
				},
				"description": "Test deck recommendation functionality using GumGum.gg integration.\n\nThis request tests:\n- Natural language processing for deck queries\n- GumGum API integration\n- Tournament deck data retrieval\n- Regional filtering (West region)\n- Set-specific queries (OP10)"
			},
			"response": []
		},
		{
			"name": "Shopify Product Search",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Set dynamic session and cart IDs",
							"const timestamp = Date.now();",
							"pm.environment.set(\"shopify_session_id\", \"postman-shopify-\" + timestamp);",
							"pm.environment.set(\"cart_id\", \"cart_\" + timestamp);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response contains product information\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.response).to.be.a('string');",
							"    // Check if response mentions product-related terms",
							"    const response = jsonData.response.toLowerCase();",
							"    const productTerms = ['booster', 'pack', 'product', 'card', 'shop', 'store'];",
							"    const containsProductInfo = productTerms.some(term => response.includes(term));",
							"    pm.expect(containsProductInfo).to.be.true;",
							"});",
							"",
							"pm.test(\"Shopify integration is available\", function () {",
							"    const jsonData = pm.response.json();",
							"    if (jsonData.capabilities) {",
							"        pm.expect(jsonData.capabilities.shopify_integration).to.be.true;",
							"    }",
							"});",
							"",
							"pm.test(\"Cart ID is handled\", function () {",
							"    const jsonData = pm.response.json();",
							"    // Cart ID should be acknowledged in some way",
							"    pm.expect(jsonData).to.have.property('sessionId');",
							"});",
							"",
							"pm.test(\"Response time is acceptable\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(30000);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "User-Agent",
						"value": "PostmanTesting/1.0",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"inputText\": \"Show me booster packs\",\n  \"sessionId\": \"{{shopify_session_id}}\",\n  \"cartId\": \"{{cart_id}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/",
					"host": [
						"{{base_url}}"
					],
					"path": [
						""
					]
				},
				"description": "Test Shopify MCP integration for product search and e-commerce functionality.\n\nThis request tests:\n- Shopify MCP server connectivity\n- Product catalog search\n- Cart ID handling\n- E-commerce integration\n- Session management with cart context"
			},
			"response": []
		},
		{
			"name": "Session Persistence Test",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Use a consistent session ID for testing persistence",
							"pm.environment.set(\"persistent_session_id\", \"postman-session-persistence-test\");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Session ID is preserved\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.sessionId).to.eql(\"postman-session-persistence-test\");",
							"});",
							"",
							"pm.test(\"Response acknowledges context\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.response).to.be.a('string');",
							"    pm.expect(jsonData.response.length).to.be.greaterThan(0);",
							"});",
							"",
							"pm.test(\"Response time is acceptable\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(30000);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "User-Agent",
						"value": "PostmanTesting/1.0",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"inputText\": \"Can you remember what we talked about before?\",\n  \"sessionId\": \"{{persistent_session_id}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/",
					"host": [
						"{{base_url}}"
					],
					"path": [
						""
					]
				},
				"description": "Test session persistence and conversation memory.\n\nThis request tests:\n- Session ID consistency\n- Conversation context retention\n- Memory functionality\n- Multi-turn conversation support\n\nNote: Run this after other requests in the same session to test memory."
			},
			"response": []
		},
		{
			"name": "Error Test - Invalid JSON",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400 (Bad Request)\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Response contains error information\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('error');",
							"});",
							"",
							"pm.test(\"Error type is specified\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('error_type');",
							"});",
							"",
							"pm.test(\"Troubleshooting information provided\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('troubleshooting');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "User-Agent",
						"value": "PostmanTesting/1.0",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"inputText\": \"Test query\",\n  \"sessionId\": \"error-test\",\n  \"invalidField\": \n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/",
					"host": [
						"{{base_url}}"
					],
					"path": [
						""
					]
				},
				"description": "Test error handling for invalid JSON format.\n\nThis request tests:\n- JSON parsing error handling\n- Error response format\n- Troubleshooting information\n- Graceful error degradation"
			},
			"response": []
		},
		{
			"name": "Error Test - Missing Required Field",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400 (Bad Request)\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Response contains error information\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('error');",
							"    pm.expect(jsonData.error).to.include('inputText');",
							"});",
							"",
							"pm.test(\"Error type indicates validation error\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.error_type).to.eql('request_validation_error');",
							"});",
							"",
							"pm.test(\"Required fields are specified\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.troubleshooting).to.have.property('required_fields');",
							"    pm.expect(jsonData.troubleshooting.required_fields).to.include('inputText');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "User-Agent",
						"value": "PostmanTesting/1.0",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"sessionId\": \"error-test-missing-field\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/",
					"host": [
						"{{base_url}}"
					],
					"path": [
						""
					]
				},
				"description": "Test error handling for missing required fields.\n\nThis request tests:\n- Request validation\n- Missing field detection\n- Helpful error messages\n- Required field specification"
			},
			"response": []
		},
		{
			"name": "Performance Test - Large Query",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Set session ID for performance test",
							"pm.environment.set(\"perf_session_id\", \"postman-perf-\" + Date.now());"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response time is within limits\", function () {",
							"    // Lambda timeout is 30 seconds, so response should be well under that",
							"    pm.expect(pm.response.responseTime).to.be.below(25000);",
							"});",
							"",
							"pm.test(\"Large query is handled\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.response).to.be.a('string');",
							"    pm.expect(jsonData.response.length).to.be.greaterThan(0);",
							"});",
							"",
							"pm.test(\"Session ID is preserved\", function () {",
							"    const jsonData = pm.response.json();",
							"    const requestSessionId = JSON.parse(pm.request.body.raw).sessionId;",
							"    pm.expect(jsonData.sessionId).to.eql(requestSessionId);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "User-Agent",
						"value": "PostmanTesting/1.0",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"inputText\": \"I'm looking for a comprehensive deck recommendation for the One Piece Trading Card Game. Specifically, I want a Red Luffy deck that's competitive in the current meta for the OP10 format in the West region. I need the complete decklist with card quantities, and I'd also like to know about any booster packs or individual cards I can buy from your store to build this deck. Can you help me with both the deck recommendation and the shopping for the cards? I'm particularly interested in tournament-winning builds that have performed well in recent competitions.\",\n  \"sessionId\": \"{{perf_session_id}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/",
					"host": [
						"{{base_url}}"
					],
					"path": [
						""
					]
				},
				"description": "Test performance with a large, complex query.\n\nThis request tests:\n- Large input handling\n- Complex query processing\n- Multiple feature integration\n- Response time under load\n- Memory usage with large inputs"
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "global-prerequest",
				"exec": [
					"// Global pre-request script",
					"console.log('Starting request to TCG Agent API');",
					"console.log('Timestamp: ' + new Date().toISOString());"
				],
				"type": "text/javascript"
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "global-test",
				"exec": [
					"// Global test script",
					"console.log('Request completed');",
					"console.log('Response time: ' + pm.response.responseTime + 'ms');",
					"console.log('Status: ' + pm.response.status);"
				],
				"type": "text/javascript"
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "https://mxrm5uczs2.execute-api.us-east-1.amazonaws.com/production",
			"type": "string"
		},
		{
			"key": "session_id",
			"value": "postman-test-session",
			"type": "string"
		},
		{
			"key": "deck_session_id",
			"value": "postman-deck-session",
			"type": "string"
		},
		{
			"key": "shopify_session_id",
			"value": "postman-shopify-session",
			"type": "string"
		},
		{
			"key": "cart_id",
			"value": "postman-cart-123",
			"type": "string"
		},
		{
			"key": "persistent_session_id",
			"value": "postman-session-persistence-test",
			"type": "string"
		},
		{
			"key": "perf_session_id",
			"value": "postman-perf-session",
			"type": "string"
		}
	]
}
